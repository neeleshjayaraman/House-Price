
# coding: utf-8

# In[1]:

import graphlab


# In[2]:

sales= graphlab.SFrame('home_data.gl/')


# In[3]:

sales


# In[4]:

graphlab.canvas.set_target('ipynb')
sales.show(view="Scatter Plot", x= "sqft_living", y="price")


# In[5]:

train_data, test_data= sales.random_split(.8, seed=0)


# In[6]:

sqft_model= graphlab.linear_regression.create(train_data, target='price', features=['sqft_living'])


# In[7]:

print test_data['price'].mean()


# In[8]:

print sqft_model.evaluate(test_data)


# In[11]:

import matplotlib.pyplot as plt
get_ipython().magic(u'matplotlib inline')


# In[12]:

plt.plot(test_data['sqft_living'],test_data['price'], '.', test_data['sqft_living'], sqft_model.predict(test_data), '-')


# In[13]:

my_features=['bedrooms','bathrooms','sqft_living','sqft_lot','floors','zipcode']


# In[14]:

sales[my_features].show()


# In[15]:

sales.show(view='BoxWhisker Plot', x='zipcode', y='price')


# In[16]:

my_features_model= graphlab.linear_regression.create(train_data,target='price',features=my_features)


# In[17]:

print sqft_model.evaluate(test_data)
print my_features_model.evaluate(test_data)


# In[18]:

house1= sales[sales['id']=='5309101200']


# In[19]:

house1


# In[20]:

print house1['price']


# In[21]:

print sqft_model.predict(house1)


# In[22]:

print my_features_model.predict(house1)


# In[23]:

house2= sales[sales['id']=='1925069082']


# In[24]:

house2


# In[25]:

print sqft_model.predict(house2)


# In[26]:

print my_features_model.predict(house2)


# In[28]:

total= sales[sales['zipcode']=='98039']


# In[29]:

print total


# In[30]:

print total['price'].mean()


# In[32]:

advanced_features = [
'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'zipcode',
'condition', # condition of house
'grade', # measure of quality of construction
'waterfront', # waterfront property
'view', # type of view
'sqft_above', # square feet above ground
'sqft_basement', # square feet in basement
'yr_built', # the year built
'yr_renovated', # the year renovated
'lat', 'long', # the lat-long of the parcel
'sqft_living15', # average sq.ft. of 15 nearest neighbors
'sqft_lot15', # average lot size of 15 nearest neighbors 
]


# In[34]:

advanced_features_model= graphlab.linear_regression.create(train_data,target='price',validation_set=None, features=advanced_features)


# In[35]:

my_features_model= graphlab.linear_regression.create(train_data,target='price',validation_set= None, features=my_features)


# In[36]:

print my_features_model.evaluate(test_data)


# In[37]:

print advanced_features_model.evaluate(test_data)






